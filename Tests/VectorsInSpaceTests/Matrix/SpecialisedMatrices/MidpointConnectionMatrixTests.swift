//
//  MidpointConnectionMatrixTests.swift
//  
//
//  Created by Aaron Vranken on 25/05/2022.
//

import XCTest
@testable import VectorsInSpace

class MidpointConnectionMatrixTests: XCTestCase {
    func test5Points5Iterations() throws {
        let matrix = MidpointConnectionMatrix(amountOfPoints: 5, iterations: 5)
        
        let solution = CirculantMatrix<Double>([
            1.0/16,
            5.0/32,
            5.0/16,
            5.0/16,
            5.0/32])
        
        XCTAssertEqual(matrix, solution)
    }
    
    func test10Points100Iterations() throws {
        let polygon: Matrix = [[-0.70143139782345321, 0.16191995777905266, 0.37236641969381101, 0.74872894878449370, 0.072225217818449927, -0.029340102844934046, -0.51485843083993910, 0.79795805107709161, -0.11168290902261080, -0.21716278111041154],[-0.19036907475881892, -0.25362073981795707, -0.91742012048380461, 0.79719266645986164, 0.64461489155489415, -0.42980342661493043, 0.13643608653662231, 0.65026757518191358, -0.49863329476814422, 0.51673889032189857],[-0.67377227726895073, 0.42469338456564265, 0.097382528863926066, -0.11234181754239425, 0.80180560823620151, -0.075575436946999641, -0.19932695086989538, -0.085056182017208881, 0.84322057574835174, 0.55254884926254744],[-0.37451156102534178, 0.57573766321576936, 0.97861598652489468, 0.63789995607234884, -0.24831312243178560, 0.54430757732001123, -0.63753251245898812, 0.082093354890086401, 0.93698790679748289, -0.86987814442402622],[0.92962452212620472, -0.69067490588080926, -0.58435095683268967, 0.56471396650401884, -0.45752288948692965, 0.70519765867098982, 0.084270576502264882, 0.95822710028449909, 0.0016799191885328302, -0.15820200792813677],[-0.45259196482886832, -0.86939015183449730, -0.29912250768818249, -0.20397532056412504, 0.24576113183088077, 0.77127841610024905, -0.78332338421733660, 0.78721851844646440, 0.092433462290538282, -0.61450284210278716],[0.84387348945351359, -0.40195496805143005, -0.14674252487345818, 0.63031874958756728, -0.33672443340741909, 0.22775767040491135, -0.63875951070458226, 0.084750322378292609, -0.70713561996932239, 0.098280341077341626],[-0.96185090968953779, 0.029941284075198693, 0.12131254593171814, 0.58010134715427264, 0.80320619658742554, 0.81779937491478694, -0.75318756571779577, 0.26200186241771140, -0.71357868652397638, -0.40634881352664465],[-0.73657914601414531, -0.93016433485230898, 0.66356713814649293, -0.91512684631642505, 0.078728156617357437, -0.93062718637886488, 0.41137221426370374, -0.16761079646698396, 0.41738996483102775, -0.82428811527243195],[0.15564286849950504, -0.82274773321999151, -0.48923413161706164, 0.45442613696614442, -0.32826832587894117, -0.96416999975139839, -0.93272618095586868, -0.16132505465194868, 0.57633939900728870, 0.055385096433538283]]
        
        let solution: Matrix = [[-0.21849194683442011, -0.27669827770805777, -0.020335833488654975, 0.31859685334437904, 0.12864374623925803, 0.059163352399251690, -0.38201175821874545, 0.32002951533448454, 0.084694539952776718, -0.18512972900657540],[-0.21769160533664894, -0.27534124955391737, -0.020521417220078740, 0.31928321001629473, 0.12858169820599047, 0.060919226950102184, -0.38170217326991068, 0.32088507114597187, 0.085873614554996591, -0.18466853793547755],[-0.21632020163285690, -0.27485693929128585, -0.020646323566690584, 0.31955344081535025, 0.12812605115360209, 0.063730560404240230, -0.38179800416875986, 0.32172817630844064, 0.086223233958540840, -0.18499970304000365],[-0.21490156513392747, -0.27543033712458098, -0.020662842879477568, 0.31930432695883260, 0.12745084672534726, 0.066523519011993895, -0.38226264688001088, 0.32223679358753204, 0.085609855127150206, -0.18599673034512418],[-0.21397756687038852, -0.27684242438084122, -0.020564665464027458, 0.31863102159424889, 0.12681399036950725, 0.068231287619776107, -0.38291862369495078, 0.32221664848391618, 0.084267767571454738, -0.18727878904878525],[-0.21390114303030902, -0.27855383146081070, -0.020389291501286225, 0.31779070436336393, 0.12645873980109015, 0.068201556653377640, -0.38351537366407368, 0.32167543546951677, 0.082709603209693006, -0.18835617630254944],[-0.21470148497623012, -0.27991085905604657, -0.020203707605185174, 0.31710434768982576, 0.12652078850068615, 0.066445682219269678, -0.38382495850454157, 0.32081987933797013, 0.081530528277269476, -0.18881736705422128],[-0.21607288906335723, -0.28039516902829253, -0.020078800598608885, 0.31683411649533177, 0.12697643564084307, 0.063634348612933045, -0.38372912738388087, 0.31997677361227356, 0.081180909488188804, -0.18848620227167223],[-0.21749152535105074, -0.27982177157443389, -0.020062281042618743, 0.31708323010907757, 0.12765163945701344, 0.060841389794372897, -0.38326448464390972, 0.31946815630514735, 0.081794289029542444, -0.18748917548497054],[-0.21841552310070367, -0.27840968484306383, -0.020160458967725503, 0.31775653571905838, 0.12828849534679593, 0.059133621208503753, -0.38260850803303137, 0.31948830195466460, 0.083136376409555596, -0.18620711677973276]]
        
        let result = connectMidpointsPolygon(polygon, iterations: 100)
        
        for i in 0..<result.rowCount {
            for j in 0..<result.columnCount {
                XCTAssertTrue(result[i, j].isApproximatelyEqual(to: solution[i, j], absoluteTolerance: pow(10, -14)))
            }
        }
    }
    
    func test3Points100Iterations() throws {
        let polygon: Matrix = [[10, 10, 10],
                               [5, 6, 3],
                               [8, 2, 1]]
        
        let result = connectMidpointsPolygon(polygon, iterations: 1000)
        print(result)
    }
    
    func test5Points10Iterations() throws {
        let matrix = MidpointConnectionMatrix(amountOfPoints: 5, iterations: 10)
        
        let solution = CirculantMatrix<Double>([
            127.0/512,
            55.0/256,
            165.0/1024,
            165.0/1024,
            55.0/256])
        
        XCTAssertEqual(matrix, solution)
    }
    
    func test5Points20Iterations() throws {
        let matrix = MidpointConnectionMatrix(amountOfPoints: 5, iterations: 20)
        
        let solution = CirculantMatrix<Double>([
            107883.0/524288,
            211585.0/1048576,
            51205.0/262144,
            51205.0/262144,
            211585.0/1048576])
        
        XCTAssertEqual(matrix, solution)
    }
}
