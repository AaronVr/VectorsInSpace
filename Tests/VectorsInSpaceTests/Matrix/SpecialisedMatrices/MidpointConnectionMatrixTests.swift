//
//  MidpointConnectionMatrixTests.swift
//  
//
//  Created by Aaron Vranken on 25/05/2022.
//

import XCTest
@testable import VectorsInSpace

class MidpointConnectionMatrixTests: XCTestCase {
    func test5Points0IterationsIsIdenity() throws {
        let matrix = MidpointConnectionMatrix(amountOfPoints: 5, iterations: 0)
        
        XCTAssertEqual(Matrix(matrix), Matrix<Double>.Identity(5))
    }
    
    func test5Points5Iterations() throws {
        let matrix = MidpointConnectionMatrix(amountOfPoints: 5, iterations: 5)
        
        let solution = CirculantMatrix<Double>([
            1.0/16,
            5.0/32,
            5.0/16,
            5.0/16,
            5.0/32])
        
        XCTAssertEqual(matrix, solution)
    }
    
    func test5Points10Iterations() throws {
        let matrix = MidpointConnectionMatrix(amountOfPoints: 5, iterations: 10)
        
        let solution = CirculantMatrix<Double>([
            127.0/512,
            55.0/256,
            165.0/1024,
            165.0/1024,
            55.0/256])
        
        XCTAssertEqual(matrix, solution)
    }
    
    func test5Points20Iterations() throws {
        let matrix = MidpointConnectionMatrix(amountOfPoints: 5, iterations: 20)
        
        let solution = CirculantMatrix<Double>([
            107883.0/524288,
            211585.0/1048576,
            51205.0/262144,
            51205.0/262144,
            211585.0/1048576])
        
        XCTAssertEqual(matrix, solution)
    }
    
    func test10Points100Iterations() throws {
        let polygon: Matrix = [[-0.70143139782345321, 0.16191995777905266, 0.37236641969381101, 0.74872894878449370, 0.072225217818449927, -0.029340102844934046, -0.51485843083993910, 0.79795805107709161, -0.11168290902261080, -0.21716278111041154],[-0.19036907475881892, -0.25362073981795707, -0.91742012048380461, 0.79719266645986164, 0.64461489155489415, -0.42980342661493043, 0.13643608653662231, 0.65026757518191358, -0.49863329476814422, 0.51673889032189857],[-0.67377227726895073, 0.42469338456564265, 0.097382528863926066, -0.11234181754239425, 0.80180560823620151, -0.075575436946999641, -0.19932695086989538, -0.085056182017208881, 0.84322057574835174, 0.55254884926254744],[-0.37451156102534178, 0.57573766321576936, 0.97861598652489468, 0.63789995607234884, -0.24831312243178560, 0.54430757732001123, -0.63753251245898812, 0.082093354890086401, 0.93698790679748289, -0.86987814442402622],[0.92962452212620472, -0.69067490588080926, -0.58435095683268967, 0.56471396650401884, -0.45752288948692965, 0.70519765867098982, 0.084270576502264882, 0.95822710028449909, 0.0016799191885328302, -0.15820200792813677],[-0.45259196482886832, -0.86939015183449730, -0.29912250768818249, -0.20397532056412504, 0.24576113183088077, 0.77127841610024905, -0.78332338421733660, 0.78721851844646440, 0.092433462290538282, -0.61450284210278716],[0.84387348945351359, -0.40195496805143005, -0.14674252487345818, 0.63031874958756728, -0.33672443340741909, 0.22775767040491135, -0.63875951070458226, 0.084750322378292609, -0.70713561996932239, 0.098280341077341626],[-0.96185090968953779, 0.029941284075198693, 0.12131254593171814, 0.58010134715427264, 0.80320619658742554, 0.81779937491478694, -0.75318756571779577, 0.26200186241771140, -0.71357868652397638, -0.40634881352664465],[-0.73657914601414531, -0.93016433485230898, 0.66356713814649293, -0.91512684631642505, 0.078728156617357437, -0.93062718637886488, 0.41137221426370374, -0.16761079646698396, 0.41738996483102775, -0.82428811527243195],[0.15564286849950504, -0.82274773321999151, -0.48923413161706164, 0.45442613696614442, -0.32826832587894117, -0.96416999975139839, -0.93272618095586868, -0.16132505465194868, 0.57633939900728870, 0.055385096433538283]]
        
        let solution: Matrix = [[-0.2184919468344200619, -0.2766982777080577958, -0.02033583348865497607, 0.3185968533443790350, 0.1286437462392580541, 0.05916335239925163501, -0.3820117582187455424, 0.3200295153344845378, 0.08469453995277672568, -0.1851297290065753876],[-0.2176916053366489585, -0.2753412495539173596, -0.02052141722007873098, 0.3192832100162947551, 0.1285816982059904585, 0.06091922695010221385, -0.3817021732699106967, 0.3208850711459719195, 0.08587361455499661032, -0.1846685379354775537],[-0.2163202016328568972, -0.2748569392912858858, -0.02064632356669057148, 0.3195534408153502745, 0.1281260511536020646, 0.06373056040424021976, -0.3817980041687598775, 0.3217281763084406318, 0.08622323395854082639, -0.1849997030400036876],[-0.2149015651339274482, -0.2754303371245809678, -0.02066284287947756614, 0.3193043269588326030, 0.1274508467253472697, 0.06652351901199387001, -0.3822626468800108812, 0.3222367935875320825, 0.08560985512715018307, -0.1859967303451241678],[-0.2139775668703884914, -0.2768424243808412094, -0.02056466546402744384, 0.3186310215942488727, 0.1268139903695072127, 0.06823128761977609660, -0.3829186236949507736, 0.3222166484839162209, 0.08426776757145472765, -0.1872787890487852842],[-0.2139011430303090315, -0.2785538314608107108, -0.02038929150128621732, 0.3177907043633638948, 0.1264587398010901635, 0.06820155665337765318, -0.3835153736640736534, 0.3216754354695166920, 0.08270960320969300388, -0.1883561763025494475],[-0.2147014849762301676, -0.2799108590560465959, -0.02020370760518515026, 0.3171043476898257121, 0.1265207885006861769, 0.06644568221926963440, -0.3838249585045415309, 0.3208198793379701194, 0.08153052827726949264, -0.1888173670542212731],[-0.2160728890633572437, -0.2803951690282925555, -0.02007880059860887639, 0.3168341164953318301, 0.1269764356408430925, 0.06363434861293303622, -0.3837291273838808574, 0.3199767736122735087, 0.08118090948818880957, -0.1884862022716722353],[-0.2174915253510507299, -0.2798217715744339140, -0.02006228104261874312, 0.3170832301090776122, 0.1276516394570134019, 0.06084138979437291820, -0.3832644846439097752, 0.3194681563051472717, 0.08179428902954242325, -0.1874891754849705525],[-0.2184155231007036662, -0.2784096848430638038, -0.02016045896772549265, 0.3177565357190584271, 0.1282884953467959208, 0.05913362120850372550, -0.3826085080330313970, 0.3194883019546645789, 0.08313637640955559398, -0.1862071167797327790]]
        
        let result = connectMidpointsPolygon(polygon, iterations: 100)
        
        for i in 0..<result.rowCount {
            for j in 0..<result.columnCount {
                XCTAssertTrue(result[i, j].isApproximatelyEqual(to: solution[i, j], absoluteTolerance: pow(10, -14)))
            }
        }
    }
    
    func test10Points200Iterations() throws {
        let polygon: Matrix = [[-0.70143139782345321, 0.16191995777905266, 0.37236641969381101, 0.74872894878449370, 0.072225217818449927, -0.029340102844934046, -0.51485843083993910, 0.79795805107709161, -0.11168290902261080, -0.21716278111041154],[-0.19036907475881892, -0.25362073981795707, -0.91742012048380461, 0.79719266645986164, 0.64461489155489415, -0.42980342661493043, 0.13643608653662231, 0.65026757518191358, -0.49863329476814422, 0.51673889032189857],[-0.67377227726895073, 0.42469338456564265, 0.097382528863926066, -0.11234181754239425, 0.80180560823620151, -0.075575436946999641, -0.19932695086989538, -0.085056182017208881, 0.84322057574835174, 0.55254884926254744],[-0.37451156102534178, 0.57573766321576936, 0.97861598652489468, 0.63789995607234884, -0.24831312243178560, 0.54430757732001123, -0.63753251245898812, 0.082093354890086401, 0.93698790679748289, -0.86987814442402622],[0.92962452212620472, -0.69067490588080926, -0.58435095683268967, 0.56471396650401884, -0.45752288948692965, 0.70519765867098982, 0.084270576502264882, 0.95822710028449909, 0.0016799191885328302, -0.15820200792813677],[-0.45259196482886832, -0.86939015183449730, -0.29912250768818249, -0.20397532056412504, 0.24576113183088077, 0.77127841610024905, -0.78332338421733660, 0.78721851844646440, 0.092433462290538282, -0.61450284210278716],[0.84387348945351359, -0.40195496805143005, -0.14674252487345818, 0.63031874958756728, -0.33672443340741909, 0.22775767040491135, -0.63875951070458226, 0.084750322378292609, -0.70713561996932239, 0.098280341077341626],[-0.96185090968953779, 0.029941284075198693, 0.12131254593171814, 0.58010134715427264, 0.80320619658742554, 0.81779937491478694, -0.75318756571779577, 0.26200186241771140, -0.71357868652397638, -0.40634881352664465],[-0.73657914601414531, -0.93016433485230898, 0.66356713814649293, -0.91512684631642505, 0.078728156617357437, -0.93062718637886488, 0.41137221426370374, -0.16761079646698396, 0.41738996483102775, -0.82428811527243195],[0.15564286849950504, -0.82274773321999151, -0.48923413161706164, 0.45442613696614442, -0.32826832587894117, -0.96416999975139839, -0.93272618095586868, -0.16132505465194868, 0.57633939900728870, 0.055385096433538283]]
        
        let solution: Matrix = [[-0.2162117328078685917, -0.2776199157065319563, -0.02036238537923942826, 0.3181964456789657981, 0.1275584717620959936, 0.06365255355639880611, -0.3827585914618467262, 0.3208470299855735765, 0.08370863848897229856, -0.1867322787284923461],[-0.2162064372951948109, -0.2776109368439874589, -0.02036361330652473834, 0.3182009870022030514, 0.1275580612150735670, 0.06366417141334001877, -0.3827565430734040340, 0.3208526908268950137, 0.08371643991329300732, -0.1867292272290520354],[-0.2161973633127807423, -0.2776077323748276822, -0.02036443975961457330, 0.3182027750030396937, 0.1275550463966438619, 0.06368277278314647596, -0.3827571771454670625, 0.3208582692884978556, 0.08371875319061565599, -0.1867314184032814253],[-0.2161879768134952369, -0.2776115262973557658, -0.02036454906151872373, 0.3182011267259280685, 0.1275505788649771155, 0.06370125257478941646, -0.3827602514840590525, 0.3208616345876547649, 0.08371469472762840553, -0.1867380152971001642],[-0.2161818631210299865, -0.2776208694621166637, -0.02036389946262483772, 0.3181966717567019202, 0.1275463650653242097, 0.06371255213596625083, -0.3827645917963307942, 0.3208615012944700945, 0.08370581471925029465, -0.1867464981212896627],[-0.2161813574581099469, -0.2776321930977342020, -0.02036273908763132660, 0.3181911117421868038, 0.1275440145259307684, 0.06371235541836539531, -0.3827685402305162667, 0.3208579203224099334, 0.08369550502686138108, -0.1867536267253301283],[-0.2161866529707837294, -0.2776411719602787029, -0.02036151116034601522, 0.3181865704189495575, 0.1275444250729531985, 0.06370073756142417918, -0.3827705886189589658, 0.3208522594810884962, 0.08368770360254067404, -0.1867566782247704373],[-0.2161957269531977997, -0.2776443764294384761, -0.02036068470725618199, 0.3181847824181129047, 0.1275474398913829001, 0.06368213619161772372, -0.3827699545468959373, 0.3208466810194856543, 0.08368539032521802278, -0.1867544870505410473],[-0.2162051134524833017, -0.2776405825069103925, -0.02036057540535203114, 0.3181864306952245369, 0.1275519074230496482, 0.06366365639997478496, -0.3827668802083039404, 0.3208433157203287450, 0.08368944878820527497, -0.1867478901567223102],[-0.2162112271449485538, -0.2776312393421494946, -0.02036122500424591714, 0.3181908856644506886, 0.1275561212227025558, 0.06365235683879794538, -0.3827625398960321987, 0.3208434490135134189, 0.08369832879658338585, -0.1867394073325328099]]
        
        let result = connectMidpointsPolygon(polygon, iterations: 200)
        
        print(result)
        for i in 0..<result.rowCount {
            for j in 0..<result.columnCount {
                XCTAssertTrue(result[i, j].isApproximatelyEqual(to: solution[i, j], absoluteTolerance: pow(10, -14)),
                "Failed at: \(i), \(j), matrix1: \(result[i,j]), matrix2: \(solution[i,j])")
            }
        }
    }
}
